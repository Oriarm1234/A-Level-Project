from room import Room
import math
import random
import pygame
import Definitions
from Entities.Entity import Entity, AI
from Entities.Player import Player
from generateImageLayout import generate_image_layout
from generateTiles import generate_tiles



screenSize = (600,600)




class Dungeon:
    def __init__(self,
                 x:int,
                 y:int,
                 minRooms:int, 
                 maxRooms:int, 
                 rating:int = 0,
                 loot:int = 0) -> None:
        """
        Initialize A Dungeon Object
        
        Parameters:
            x:
                Stores the x position of the dungeon, NOT USED AT THE MOMENT
            y:
                Stores the y position of the dungeon, NOT USED AT THE MOMENT
            
            minRooms:
                The minimum amount of rooms for the dungeon to generate
            maxRooms:
                The maximum amount of rooms for the dungeon to generate
            
            rating:
                N/A
            loot:
                N/A
                
        Function:
            Represents a dungeon in game.
            Initializes all needed variables.
            Then generates rooms.
            
        Output -> None
        """
        
        self.x = x
        self.y = y
        self.minRooms = minRooms
        self.maxRooms = maxRooms
        self.rooms: dict[tuple[int,int], Room] = {} # Will store the rooms generated by the dungeon
        self.starterRoom = [0,0]
        self.tiles = {}
        self.dungeonLayout = {} # Will hold the pygame surfaces to draw on screen
        self.levels = {}
        self.maxZoneId = 0
        self.player = None
        self.generate_image_layout()
        
    def unlock_room(self, roomCoord):
        if roomCoord in self.rooms:
            locked=self.rooms[roomCoord].locked
            self.rooms[roomCoord].locked = False   
            return locked
        else:
            return False
        
    
    
    def generate_tiles(self):
        return generate_tiles(self)
                    
        
    def generate_image_layout(self):
        return generate_image_layout(self)
    
        
    def get_layers(self,screenSize, pos):
        layers = {}
        for layerIndex in self.dungeonLayout:
            layer = self.dungeonLayout[layerIndex]
            layers[layerIndex] = {}
            for index in layer:
                layers[layerIndex][index] = pygame.Surface(screenSize, pygame.SRCALPHA)
                layers[layerIndex][index].fill((0,0,0,0))
                for coord in layer[index]:
                    x,y = coord
                    
                    x = (x+.5) * Definitions.GRID_SQUARE_WIDTH + pos[0]*Definitions.GRID_SQUARE_WIDTH*Definitions.ROOM_SIZE[0]
                    y = (y+.5) * Definitions.GRID_SQUARE_HEIGHT + pos[1]*Definitions.GRID_SQUARE_HEIGHT*Definitions.ROOM_SIZE[1]
                    
                    
                    
                    img = layer[index][coord]
                    if x>= screenSize[0] or y>=screenSize[1] or\
                       x+img.get_width()<=0 or y+img.get_height()<=0:
                        continue
                    
                    
                    layers[layerIndex][index].blit(img, (x-img.get_width()/2,y-img.get_height()/2))
                
                    
                
        return layers
        

            
            
            
            
            
dung = Dungeon(0,0,300,500,0,0)

for i in range(5000):
    
    room = random.choice(list(dung.rooms))
    badGuy = AI(room[0]*7+random.randint(0,6),room[1]*7+random.randint(0,6),0,"kyle",1,10,10,dung,dung.rooms[room],dung.rooms[room].zoneId)
    badGuy.movementType = 0

    

x1,y1 = 1,1

currentRoom = dung.rooms[(0,0)]

layers = dung.get_layers(screenSize, (x1,y1))
screen = pygame.display.set_mode(screenSize)
angle = 0
clock = pygame.time.Clock()

moving = False

beenIn = []#


print(dung.roomAmount)

while True:
    for ind in AI.All:
        AI.All[ind].playerX = currentRoom.x*7
        AI.All[ind].playerY = currentRoom.y*7
        AI.All[ind].update()
    events=pygame.event.get()
    keys = pygame.key.get_pressed()
    
    w,d,s,a = keys[pygame.K_w],keys[pygame.K_d],keys[pygame.K_s],keys[pygame.K_a]
    
    if w and not moving:
        moving = True
        if "north" in currentRoom.sideRooms:
            currentRoom = currentRoom.sideRooms.get("north", currentRoom)
            
            print(currentRoom.zoneId)
            
            y1+=1
            
            layers = dung.get_layers(screenSize, (x1,y1))
            
            if currentRoom not in beenIn:
                beenIn.append(currentRoom)
        
    if d and not moving:
        moving = True
        if "east" in currentRoom.sideRooms:
            currentRoom = currentRoom.sideRooms.get("east", currentRoom)
            print(currentRoom.zoneId)
            x1-=1
            
            layers = dung.get_layers(screenSize, (x1,y1))
            
            if currentRoom not in beenIn:
                beenIn.append(currentRoom)
    
    if s and not moving:
        moving = True
        if "south" in currentRoom.sideRooms:
            currentRoom = currentRoom.sideRooms.get("south", currentRoom)
            print(currentRoom.zoneId)
            y1-=1
            
            layers = dung.get_layers(screenSize, (x1,y1))
            
            if currentRoom not in beenIn:
                beenIn.append(currentRoom)
        
    if a and not moving:
        moving = True
        if "west" in currentRoom.sideRooms:
            currentRoom = currentRoom.sideRooms.get("west", currentRoom)
            print(currentRoom.zoneId)
            x1+=1
            
            layers = dung.get_layers(screenSize, (x1,y1))
            
            if currentRoom not in beenIn:
                beenIn.append(currentRoom)
        
    if (not (w or d or s or a)) and moving:
        moving = False
        
        
    

    
    
    pygame.display.set_caption(str(clock.get_fps()))
    
        
    
    #print(currentRoom.locked)
    
    
    screen.fill((0,0,0))
    
    angle += clock.tick(200)/10
    
    for layerIndex in layers:
        for index in layers[layerIndex]:
            size = currentRoom.screenRoomSize
            modifier = size[1] / screenSize[1]
            layer = layers[layerIndex][index]
            
            screen.blit(layer, (300-layer.get_width()/2+(-index-layerIndex)/8,300-layer.get_height()/2+(-index-layerIndex)))
            
    for room in dung.rooms:
        x,y = room
        
        colour = (255,255,255)
        
        if dung.rooms[room] != currentRoom:
            if dung.rooms[room].locked:
                colour = (165,165,165)
            
            else:
                if dung.rooms[room] not in beenIn:
                    colour = (int(255/dung.maxZoneId*dung.rooms[room].zoneId),0,0)
                else:
                    colour = (0,0,255)
            
            colour = (int(255/dung.maxZoneId*dung.rooms[room].zoneId),0,0)
        else:
            colour = (0,255,0)
            
        
        
        
        pygame.draw.circle(screen, colour, (x*10+currentRoom.screenRoomSize[0]//2, y*10+currentRoom.screenRoomSize[1]//2), 5)
        
    for ai in AI.All:
        ai = AI.All[ai]
        
        pygame.draw.circle(screen, (0,255,0), (ai.x//7*10+ai.x%7+currentRoom.screenRoomSize[0]//2-2.5, -2.5+ai.y//7*10+ai.y%7+currentRoom.screenRoomSize[1]//2),1)
        
    pygame.display.update()